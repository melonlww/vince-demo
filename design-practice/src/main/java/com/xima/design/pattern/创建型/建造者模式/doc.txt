建造者模式（Builder Pattern）是将一个复杂对象的构建与它的表示分离，使得同样的构建过程
可以创建不同的表示

特征：
用户只需指定需要构造的类型就可以获得对象，建造过程及细节不需要了解


建造者模式适合用于创建对象需要很多步骤, 但是步骤的顺序不固定, 例如JPA的 Query, StringBuilder 等;
例如 Query, 在sql条件无规律的情况下, 用户不在需要关心数据库具体需要的sql拼接规则, 而是通过链路调用的方式添加属性的查询逻辑,
是eq 还是 or 或是like, order by 等; 不再需要关心sql中某个关键字的位置, 可以避免手动拼接sql时产生的人为拼接错误;

例如: StringBuilder中, 我们拼接字符串的时候想要字符串拼接到一块, 那么java语言的特性, 因为String类是不可变,
一定会产生多个String对象; 那么用到StringBuilder的时候, 它会将用户需要拼接的内容存储在char[]数组中, 等用户是什么时候拼接结束的时候调用
toString方法就可以将数组中的内容按原有添加顺序, 一次性进行转化成String

例如: 假设车企要生产一个系列的车子, 这个系列有低配有高配, 低配有 A B C D这些功能, 高配有A B C D E F这些功能,
可能在后续低配或高配上还需要增加其他功能, 在程序设计若是设置两个生产线的类, 那么会造成代码不能复用的情况, 若是使用建造者模式设计的话,
仅需要将各功能的构建过程, 设置到构建类中, 由构建类进行功能的组装, 最终调用builder方法生产出来的车子就可以实现低配和高配的场景